swagger: "2.0"
info:
  description: "This is a Binar Car Rental server."
  version: "1.0.0"
  title: "Binar Car Rental Server"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
  - name: "car"
    description: "Everything about car"
  - name: "user"
    description: "Operations about user"
schemes:
  - "https"
  - "http"
paths:
  /addcar:
    get:
      tags:
        - "car"
      summary: "Redirect to form add car"
      description: ""
      operationId: "getFormAddCar"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Car"
        "400":
          description: "Invalid status value"
      security:
        - petstore_auth:
            - "write:cars"
            - "read:cars"
  /cars/add:
    post:
      tags:
        - "car"
      summary: "Add a new car"
      description: ""
      operationId: "addCar"
      consumes:
        - "application/json"
        - "application/xml"
        - "multipart/form-data"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Car object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Car"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        "405":
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:cars"
            - "read:cars"
  /cars/update/{CarId}:
    put:
      tags:
        - "car"
      summary: "Update an existing car"
      description: ""
      operationId: "updateCar"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Car object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Car"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Car not found"
        "405":
          description: "Validation exception"
      security:
        - petstore_auth:
            - "write:cars"
            - "read:cars"
  /cars/update/{carId}:
    get:
      tags:
        - "car"
      summary: "Get form update car by ID"
      description: "Returns a form for update car by ID"
      operationId: "getCarById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "carId"
          in: "path"
          description: "ID of car to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Car"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Car not found"
      security:
        - api_key: []
    post:
      tags:
        - "car"
      summary: "Updates a car in the store with form data"
      description: ""
      operationId: "updateCarWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
        - "multipart/form-data"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "CarId"
          in: "path"
          description: "ID of car that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "manufacture"
          in: "formData"
          description: "Updated manufacture of the car"
          required: false
          type: "string"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        "405":
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /cars/delete/{carId}:
    delete:
      tags:
        - "car"
      summary: "Deletes a car"
      description: ""
      operationId: "deleteCar"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "carId"
          in: "path"
          description: "Car id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Car not found"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Car:
    type: "object"
    required:
      - "manufacture"
      - "photo"
    properties:
      id:
        type: "integer"
        example: "1"
      size_id:
        $ref: "#/definitions/Ukur"
      plate:
        type: "string"
        example: "DBH-3491"
      manufacture:
        type: "string"
        example: "Ford"
      model:
        type: "string"
        example: "F150"
      photo:
        type: "string"
        xml:
          name: "photo"
          wrapped: true
        items:
          type: "string"
      rentPerDay:
        type: "integer"
        example: "500000"
      capacity:
        type: "integer"
        example: "2"
      description:
        type: "string"
        example: "Brake assist. Leather-wrapped shift knob. Glove box lamp. Air conditioning w/in-cabin microfilter."
      transmission:
        type: "string"
        example: "Automatic"
      type:
        type: "string"
        example: "Sedan"
      year:
        type: "string"
        example: "2022"
      options:
        type: "string"
        example: "Cruise Control"
      specs:
        type: "string"
        example: "Brake assist"
      availableAt:
        type: "string"
        example: "2022-03-23T15:49:05.563Z"
    xml:
      name: "Car"
  Ukur:
    type: "object"
    required:
    properties:
      id:
        type: "integer"
        example: "1"
      size:
        type: "string"
        example: "Small"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
